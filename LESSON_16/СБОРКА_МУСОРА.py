"""
Когда счетчик ссылок на объект достигает нуля, он уничтожается сборщиком мусора. Однако в некоторых случаях могут возникать циклические зависимости между коллекциями объектов, которые больше не используются. Например:

a = {}
b = {}
a['b'] = b # a содержит ссылку на b
b['a'] = a # b содержит ссылку на a
del a
del b
В этом примере инструкция del уменьшает счетчики ссылок на объекты a и b
и уничтожает имена, ссылавшиеся на объекты в памяти.
Однако поскольку объекты содержат ссылки друг на друга,
счетчики ссылок не достигают нуля и
объекты продолжают существовать(что приводит к утечке памяти).
Чтобы исправить эту проблему,
интерпретатор периодически выполняет проверку наличия циклических зависимостей, отыскивает такие недоступные объекты и удаляет их. Механизм поиска циклических зависимостей запускается периодически, как только интерпретатор обнаруживает, что в процессе выполнения программы объем занимаемой памяти начинает расти. Точное поведение
механизма может корректироваться и управляться с помощью функции из модуля gc.
"""


import gc
print(gc.get_threshold())

import sys, gc
def create_cycle():
    list = [8, 9, 10]
    list.append(list)
def main():
    print("Creating garbage...")
    for i in range(8):
        create_cycle()
    print("Collecting...")
    n = gc.collect()
    print("Number of unreachable objects collected by GC:", n)
    print("Uncollectable garbage:", gc.garbage)
if __name__ == "__main__":
    main()
    sys.exit()
